import{_ as n,c as a,o as s,a as t}from"./app.a4c755db.js";const e='{"title":"纯CSS图标方案","description":"","frontmatter":{"title":"纯CSS图标方案","date":"2022-08-14T00:00:00.000Z","author":"Elone Hoo","twitter":"@huchengye"},"headers":[{"level":2,"title":"现有的解决方案","slug":"现有的解决方案"},{"level":2,"title":"我的想法","slug":"我的想法"},{"level":2,"title":"实现","slug":"实现"},{"level":2,"title":"后续","slug":"后续"}],"relativePath":"posts/icons-in-pure-css.md","lastUpdated":1660487519376}',p={},o=[t('<blockquote><p>我想开启一个新坑，在编写实验🧪项目<a href="https://github.com/elonehoo/pick" target="_blank" rel="noopener noreferrer">pick</a> 时，设计了一个<a href="https://pick.elonehoo.xyz/components/icon.html" target="_blank" rel="noopener noreferrer">组件 pick-icon</a></p></blockquote><p>我认识到了一个很酷的<a href="https://github.com/iconify/iconify" target="_blank" rel="noopener noreferrer">仓库</a>，他提供了超过 100,000 个图标的 100 多个图标集，这是一个非常疯狂的实验项目，我想创建一个icon的组件，他基于 iconify 可以基于我们所安装的图标集，按需加载图标。</p><hr><h2 id="现有的解决方案" tabindex="-1">现有的解决方案 <a class="header-anchor" href="#现有的解决方案" aria-hidden="true">#</a></h2><p>其实社区早已经有一个名为 <a href="https://github.com/astrit/css.gg" target="_blank" rel="noopener noreferrer">css.gg</a> 的纯css图标的解决方案。它完全通过伪元素（<code>::before</code>，<code>::after</code>）来构建图标。因为如果需要使用这个解决方案，那么就需要我们对于 CSS 的工作原理有一个十分深刻的理解，但是同时很难创造出一个更为复杂的图标(因为它只有3个元素可以供我们使用)。我的脑海里产生了一个非常酷炫的想法，我觉得可以应用在所有的图标上而并非只局限于在特定的集合中进行有限的选择。</p><h2 id="我的想法" tabindex="-1">我的想法 <a class="header-anchor" href="#我的想法" aria-hidden="true">#</a></h2><p>用 CSS 中的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs" target="_blank" rel="noopener noreferrer">Data URLs</a> 中的文件模式作为背景图，并且产生一段 CSS:</p><div class="language-css"><pre><code><span class="token selector">.my-icon</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>data:...<span class="token punctuation">)</span></span> no-repeat center<span class="token punctuation">;</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 1.2em<span class="token punctuation">;</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 1.2em<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>有了这种方案，我们就可以使用一个单独的类在 CSS 中内嵌任何图像。</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-hidden="true">#</a></h2><p>我们可以使用 <a href="https://github.com/iconify/iconify" target="_blank" rel="noopener noreferrer">iconify</a> 的utils包来实现我们的想法，初步设计为</p><div class="language-typescript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> iconToSVG<span class="token punctuation">,</span> getIconData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@iconify/utils&#39;</span>\n<span class="token comment">// (假的，意思到了就可以了)</span>\n<span class="token keyword">const</span> svg <span class="token operator">=</span> <span class="token function">iconToSVG</span><span class="token punctuation">(</span><span class="token function">getIconData</span><span class="token punctuation">(</span><span class="token string">&#39;mdi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;alarm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>当我们得到 SVG 字符串后，可以将其转换为 DataURLs：</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> dataUri <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data:image/svg+xml;base64,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>svg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>这样的话，基本效果就实现了。</p><h2 id="后续" tabindex="-1">后续 <a class="header-anchor" href="#后续" aria-hidden="true">#</a></h2><p>还需要继续设计，不然肯定不能用。</p>',17)];var c=n(p,[["render",function(n,t,e,p,c,r){return s(),a("div",null,o)}]]);export{e as __pageData,c as default};
